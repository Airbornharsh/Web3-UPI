// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int      @id @default(autoincrement())
  name          String
  walletAddress String   @unique
  pin           String
  walletBalance String   @default("0")
  Locked        Boolean  @default(false)
  upiId         String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  senderTransaction        Transaction[]          @relation("sender")
  receiverTransaction      Transaction[]          @relation("receiver")
  ClaimedSol               ClaimedSol[]
  userOperationTransaction OperationTransaction[] @relation("user")
  toOperationTransaction   OperationTransaction[] @relation("to")
}

model OperationTransaction {
  id        Int       @id @default(autoincrement())
  userId    Int
  amount    String
  signature String
  operation OPERATION
  toId      Int?
  fee       String    @default("0")
  status    Status    @default(PENDING)
  createdAt DateTime  @default(now())

  user        User          @relation("user", fields: [userId], references: [id])
  to          User?         @relation("to", fields: [toId], references: [id])
  Transaction Transaction[]
}

model Transaction {
  id                     Int        @id @default(autoincrement())
  senderId               Int
  recieverId             Int
  amount                 String
  signature              String     @default("")
  wallet                 WalletType @default(WALLET1)
  status                 Status     @default(PENDING)
  operationTransactionId Int?
  createdAt              DateTime   @default(now())

  sender    User                  @relation("sender", fields: [senderId], references: [id])
  receiver  User                  @relation("receiver", fields: [recieverId], references: [id])
  operation OperationTransaction? @relation(fields: [operationTransactionId], references: [id])
}

model ClaimedSol {
  id            Int      @id @default(autoincrement())
  userId        Int
  walletAddress String
  createdAt     DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

enum WalletType {
  WALLET1
  WALLET2
}

enum Status {
  PENDING
  COMPLETED
  FAILED
}

enum OPERATION {
  PREDEPOSIT
  DEPOSIT
  WITHDRAW
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
